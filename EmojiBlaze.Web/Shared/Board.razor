@using Blazor.Fluxor
@using EmojiBlaze.Models.Store.Game
@inject IState<GameState> GameState
@inject IDispatcher Dispatcher
@inherits Blazor.Fluxor.Components.FluxorComponent

@if (GameState.Value.GameStage == GameStage.Completed)
{
    <h1>Game Complete!</h1>
}

@if (GameState.Value.Cards != null && !GameOver)
{
    @foreach (var rowX in GameState.Value.Cards.Select(x => x.X).Distinct())
    {
        <div class="row">
            @foreach (var card in GameState.Value.Cards.Where(x => x.X == rowX))
            {
                <div class="col">
                    <CardView Card="@card"></CardView>
                </div>
            }
        </div>
    }
}

@if (GameOver) { 
    <h1>@GameOverMessage</h1>
}


@code {

    private bool GameOver => GameState.Value.GameStage == GameStage.Completed;


    private string GameOverMessage
    {
        get
        {
            if (!GameOver) return string.Empty;

            var scoreGrouping = GameState.Value.Players.GroupBy(x => x.Score).OrderByDescending(x => x.Key).First();
            return scoreGrouping.Count() == 1 ? $"{scoreGrouping.Single().Name} is the winner! " : $"It's a tie between {scoreGrouping.Count()} players!";
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GameState.Subscribe(this);
    }

}